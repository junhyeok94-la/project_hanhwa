[2025-08-22T04:07:34.154+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2025-08-22T04:07:34.178+0000] {taskinstance.py:2603} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: etl_pipeline_bi.aggregate_to_bi manual__2025-08-22T04:07:30+00:00 [queued]>
[2025-08-22T04:07:34.185+0000] {taskinstance.py:2603} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: etl_pipeline_bi.aggregate_to_bi manual__2025-08-22T04:07:30+00:00 [queued]>
[2025-08-22T04:07:34.185+0000] {taskinstance.py:2856} INFO - Starting attempt 1 of 1
[2025-08-22T04:07:34.198+0000] {taskinstance.py:2879} INFO - Executing <Task(PostgresOperator): aggregate_to_bi> on 2025-08-22 04:07:30+00:00
[2025-08-22T04:07:34.208+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=879) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2025-08-22T04:07:34.210+0000] {standard_task_runner.py:72} INFO - Started process 881 to run task
[2025-08-22T04:07:34.211+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'etl_pipeline_bi', 'aggregate_to_bi', 'manual__2025-08-22T04:07:30+00:00', '--job-id', '18', '--raw', '--subdir', 'DAGS_FOLDER/etl_pipeline_bi.py', '--cfg-path', '/tmp/tmpf_mwejo_']
[2025-08-22T04:07:34.213+0000] {standard_task_runner.py:105} INFO - Job 18: Subtask aggregate_to_bi
[2025-08-22T04:07:34.263+0000] {task_command.py:467} INFO - Running <TaskInstance: etl_pipeline_bi.aggregate_to_bi manual__2025-08-22T04:07:30+00:00 [running]> on host 21c40e4c1785
[2025-08-22T04:07:34.338+0000] {taskinstance.py:3122} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='etl_pipeline_bi' AIRFLOW_CTX_TASK_ID='aggregate_to_bi' AIRFLOW_CTX_EXECUTION_DATE='2025-08-22T04:07:30+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-08-22T04:07:30+00:00'
[2025-08-22T04:07:34.339+0000] {taskinstance.py:731} INFO - ::endgroup::
[2025-08-22T04:07:34.352+0000] {sql.py:282} INFO - Executing: 
        -- 여러 mart 테이블의 데이터를 UNION ALL로 통합하고 집계
        DROP TABLE IF EXISTS bi.shipbuilding_kpi_summary;

        CREATE TABLE bi.shipbuilding_kpi_summary AS
        SELECT
            customer_country_cleaned,
            ship_type,
            COUNT(project_id) AS total_orders,
            SUM(order_value) AS total_order_value,
            AVG(order_value) AS avg_order_value,
            AVG(build_duration_days) AS avg_build_duration_days
        FROM (
            SELECT
                project_id,
                ship_type,
                customer_country_cleaned,
                order_value,
                build_duration_days
            FROM mart.container_ships_clean
            UNION ALL
            SELECT
                project_id,
                ship_type,
                customer_country_cleaned,
                order_value,
                build_duration_days
            FROM mart.drill_ships_clean
            UNION ALL
            SELECT
                project_id,
                ship_type,
                customer_country_cleaned,
                order_value,
                build_duration_days
            FROM mart.submarines_clean
        ) AS unified_data
        GROUP BY customer_country_cleaned, ship_type
        ORDER BY total_order_value DESC;
        
[2025-08-22T04:07:34.361+0000] {base.py:84} INFO - Retrieving connection 'datalake_1'
[2025-08-22T04:07:34.370+0000] {base.py:84} INFO - Retrieving connection 'datalake_1'
[2025-08-22T04:07:34.394+0000] {sql.py:509} INFO - Running statement: 
        -- 여러 mart 테이블의 데이터를 UNION ALL로 통합하고 집계
        DROP TABLE IF EXISTS bi.shipbuilding_kpi_summary;

        CREATE TABLE bi.shipbuilding_kpi_summary AS
        SELECT
            customer_country_cleaned,
            ship_type,
            COUNT(project_id) AS total_orders,
            SUM(order_value) AS total_order_value,
            AVG(order_value) AS avg_order_value,
            AVG(build_duration_days) AS avg_build_duration_days
        FROM (
            SELECT
                project_id,
                ship_type,
                customer_country_cleaned,
                order_value,
                build_duration_days
            FROM mart.container_ships_clean
            UNION ALL
            SELECT
                project_id,
                ship_type,
                customer_country_cleaned,
                order_value,
                build_duration_days
            FROM mart.drill_ships_clean
            UNION ALL
            SELECT
                project_id,
                ship_type,
                customer_country_cleaned,
                order_value,
                build_duration_days
            FROM mart.submarines_clean
        ) AS unified_data
        GROUP BY customer_country_cleaned, ship_type
        ORDER BY total_order_value DESC;
        , parameters: None
[2025-08-22T04:07:34.407+0000] {sql.py:518} INFO - Rows affected: 15
[2025-08-22T04:07:34.417+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2025-08-22T04:07:34.418+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=etl_pipeline_bi, task_id=aggregate_to_bi, run_id=manual__2025-08-22T04:07:30+00:00, execution_date=20250822T040730, start_date=20250822T040734, end_date=20250822T040734
[2025-08-22T04:07:34.465+0000] {local_task_job_runner.py:261} INFO - Task exited with return code 0
[2025-08-22T04:07:34.476+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/models/baseoperator.py:1378: AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
  result = cls.__new__(cls)

[2025-08-22T04:07:34.484+0000] {taskinstance.py:3891} INFO - 0 downstream tasks scheduled from follow-on schedule check
[2025-08-22T04:07:34.485+0000] {local_task_job_runner.py:240} INFO - ::endgroup::
